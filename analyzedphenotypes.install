<?php

/**
 * Implements hook_install().
 */
 
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.api');


function analyzedphenotypes_schema() {
  $schema = array();

  $phenotype_exists = db_table_exists('chado.phenotype');

  if (!$phenotype_exists) {
    $schema['chado.phenotypes'] = array(
      'description' => t('Table for analyzed phenotype.'),
      'fields' => array(
        'phenotype_id' => array(
          'description' => t('A unique id number. Primary key.'),
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'uniquename' => array(
          'description' => t('Unique name.'),
          'type' => 'text',
          'not null' => TRUE,
        ),
        'observable_id' => array(
          'description' => t('The entity (anatomy part, biological process).'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'attr_id' => array(
          'description' => t('Primary key for the trait.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'value' => array(
          'description' => t('The measured value.'),
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ),
        'cvalue_id' => array(
          'description' => t('Link to the scale value recorded.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'assay_id' => array(
          'description' => t('The evidence type.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'project_id' => array(
          'description' => t('Link to the experiment.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'stock_id' => array(
          'description' => t('Link to the stock the trait was observed/measured on.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
      ),
      'primary key' => array('phenotype_id'),
    );
  }

  $phenotypeprop_exists = db_table_exists('chado.phenotypeprop');

  if (!$phenotypeprop_exists) {
    //
    $schema['chado.phenotypeprop'] = array(
      'description' => t('Analyzed phenotype properties'),
      'fields' => array(
        'phenotypeprop_id' => array(
          'description' => t('A unique id number. Priimary key.'),
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'phenotype_id' => array(
          'description' => t('Foreign key: ap_phenotypes.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'type_id' => array(
          'description' => t('Property type.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'value' => array(
          'description' => t('The free-text value of the property.'),
          'type' => 'text',
          'not null' => TRUE,
        ),
        'cvalue_id' => array(
          'description' => t('Links to cvterm if property is controlled.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'rank' => array(
          'description' => t('Property value ordering'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
      ),
      'primary key' => array('phenotypeprop_id'),
      'foreign keys' => array(
        'ap_phenotypes' => array(
          'table' => 'ap_phenotypes',
          'columns' => array('phenotype_id' => 'phenotype_id')
        ),
      ),
    );
  }


  return $schema;
}


/**
 * Implements hook_enable().
 */
function analyzedphenotypes_enable() {
  // Add a materialized view to calculate the mean for quantitative data.
  $mview = analyzedphenotypes_mview('view_phenotypes');
  
  $query = $mview['query'];
  $schema = $mview['schema'];
  
  tripal_add_mview($schema['table'], 'analyzedphenotypes', $schema, $query, $schema['description']);

  // Add a summary materialized view.
  $query = "
    (SELECT organism_genus, 1 as num, 1 as count
       FROM chado.mview_phenotype
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 2 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, trait_id FROM chado.mview_phenotype) d2
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 3 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, experiment_id FROM chado.mview_phenotype) d3
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 4 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, stock_id FROM chado.mview_phenotype) d4
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 5 as num, count(1)
       FROM chado.mview_phenotype
       GROUP BY organism_genus)
  ";

  $schema = array (
    'table' => 'mview_phenotype_summary',
    'description' => 'A summary of phenotypes.',
    'fields' => array (
      'organism_genus' => array (
        'type' => 'text',
        'not null' => true,
      ),
      'column_num' => array (
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'count' => array (
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
    ),
  );

  tripal_add_mview($schema['table'], 'analyzedphenotypes', $schema, $query, $schema['description']);

  $arr_fields = array(
    'project_id' => array('table' => 'phenotype',     'ref' => 'project', 'ref_id' => 'project_id'),
    'stock_id' =>   array('table' => 'phenotype',     'ref' => 'stock',   'ref_id' => 'stock_id'),
    'cvalue_id' =>  array('table' => 'phenotypeprop', 'ref' => 'cvterm',  'ref_id' => 'cvterm_id'),
  );

  foreach($arr_fields as $field => $items) {
    $exists = db_field_exists('chado.' . $items['table'], $field);

    if (!$exists) {
      $sql = sprintf('ALTER TABLE {%s} ADD COLUMN %s integer REFERENCES {%s} (%s)',
      $items['table'], $field, $items['ref'], $items['ref_id']);

      chado_query($sql);
    }
  }
}

/**
 * Implements hook_install().
 */
function analyzedphenotypes_install() {
  $vars = analyzedphenotypes_systemvars();

  foreach($vars as $i => $v) {
    if (is_array($v)) {
      foreach($v as $j => $k) {
        variable_set($k, 'not set');
      }
    }
    else {
      variable_set($v, 'not set');
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function analyzedphenotypes_uninstall() {
  $vars = analyzedphenotypes_systemvars();

  foreach($vars as $i => $v) {
    if (is_array($v)) {
      foreach($v as $j => $k) {
        variable_del($k);
      }
    }
    else { 
      variable_del($v);
    }
  }
  
  foreach(array('mview_phenotype', 'mview_phenotype_summary') as $mview) {
    $mview_id = tripal_get_mview_id($mview);

    if (isset($mview_id) && $mview_id > 0) {
      tripal_delete_mview($mview_id);
    }
  }
}
