<?php
/**
 * Implements hook_install().
 */

// Make the API available during install.
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.api');

/**
 * Implements hook_enable().
 */
function analyzedphenotypes_enable() {

  // Check we have the phenotype tables we expect to have.
  if (!db_table_exists('chado.phenotype')) {
    tripal_report_error('analyzedpenotypes', TRIPAL_CRITICAL,
      'Analyzed Phenotypes requires the chado.phenotype table to exists. Make sure you have installed chado v1.2+');
    return FALSE;
  }
  if (!db_table_exists('chado.phenotypeprop')) {
    tripal_report_error('analyzedpenotypes', TRIPAL_CRITICAL,
      'Analyzed Phenotypes requires the chado.phenotypeprop table to exists. Make sure you have installed chado v1.2+');
    return FALSE;
  }

  // Add a materialized view to calculate the mean for quantitative data.
  $query = "
      SELECT
        o.genus as organism_genus,
        trait.cvterm_id as trait_id,
        trait.name as trait_name,
        proj.project_id as project_id,
        proj.name as project_name,
        loc.value as location,
        yr.value as year,
        s.stock_id as germplasm_id,
        s.name as germplasm_name,
        avg( CAST(p.value as FLOAT) ) as mean
      FROM {phenotype} p
      LEFT JOIN {cvterm} trait ON trait.cvterm_id=p.attr_id
      LEFT JOIN {project} proj USING(project_id)
      LEFT JOIN {stock} s USING(stock_id)
      LEFT JOIN {organism} o ON o.organism_id=s.organism_id
      LEFT JOIN {phenotypeprop} loc ON loc.phenotype_id=p.phenotype_id AND loc.type_id IN (SELECT cvterm_id FROM chado.cvterm WHERE name='Location')
      LEFT JOIN {phenotypeprop} yr ON yr.phenotype_id=p.phenotype_id AND yr.type_id IN (SELECT cvterm_id FROM chado.cvterm WHERE name='Year')
      GROUP BY trait.cvterm_id, trait.name, proj.project_id, proj.name, loc.value, yr.value, s.stock_id, s.name, o.genus";
  $schema = array(
    'description' => 'Caches phenotypic data for easier retrieval of means. Data replicates are combined.',
    'table' => 'mview_phenotype',
    'fields' => array (
      'organism_genus' => array (
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'trait_id' => array (
        'size' => 'big',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'trait_name' => array (
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'experiment_id' => array (
        'size' => 'big',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'experiment_name' => array (
        'type' => 'text',
        'not null' => TRUE,
      ),
      'location' => array (
        'type' => 'text',
        'not null' => TRUE,
      ),
      'year' => array (
        'type' => 'text',
        'not null' => TRUE,
      ),
      'stock_id' => array (
        'size' => 'big',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'stock_name' => array (
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'mean' => array(
        'type' => 'float',
      ),
    ),
    'indexes' => array(),
  );
  tripal_add_mview($schema['table'], 'analyzedphenotypes', $schema, $query, $schema['description'], FALSE);

  // Add a summary materialized view.
  $query = "
    (SELECT organism_genus, 1 as num, 1 as count
       FROM chado.mview_phenotype
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 2 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, trait_id FROM chado.mview_phenotype) d2
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 3 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, experiment_id FROM chado.mview_phenotype) d3
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 4 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, stock_id FROM chado.mview_phenotype) d4
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 5 as num, count(1)
       FROM chado.mview_phenotype
       GROUP BY organism_genus)
  ";

  $schema = array (
    'table' => 'mview_phenotype_summary',
    'description' => 'A summary of phenotypes.',
    'fields' => array (
      'organism_genus' => array (
        'type' => 'text',
        'not null' => true,
      ),
      'column_num' => array (
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'count' => array (
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
    ),
  );

  tripal_add_mview($schema['table'], 'analyzedphenotypes', $schema, $query, $schema['description'], FALSE);

  // Extend chado phenotype/phenotypeprop.
  $arr_fields = array(
    'project_id' => array('table' => 'phenotype',     'ref' => 'project', 'ref_id' => 'project_id'),
    'stock_id' =>   array('table' => 'phenotype',     'ref' => 'stock',   'ref_id' => 'stock_id'),
    'cvalue_id' =>  array('table' => 'phenotypeprop', 'ref' => 'cvterm',  'ref_id' => 'cvterm_id'),
  );
  foreach($arr_fields as $field => $items) {
    $exists = db_field_exists('chado.' . $items['table'], $field);

    if (!$exists) {
      $sql = sprintf('ALTER TABLE {%s} ADD COLUMN %s integer REFERENCES {%s} (%s)',
      $items['table'], $field, $items['ref'], $items['ref_id']);

      chado_query($sql);
    }
  }
}

/**
 * Implements hook_install().
 */
function analyzedphenotypes_install() {
  $vars = analyzedphenotypes_systemvars();

  foreach($vars as $i => $v) {
    if (is_array($v)) {
      foreach($v as $j => $k) {
        variable_set($k, 'not set');
      }
    }
    else {
      variable_set($v, 'not set');
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function analyzedphenotypes_uninstall() {
  $vars = analyzedphenotypes_systemvars();

  foreach($vars as $i => $v) {
    if (is_array($v)) {
      foreach($v as $j => $k) {
        variable_del($k);
      }
    }
    else {
      variable_del($v);
    }
  }

  foreach(array('mview_phenotype', 'mview_phenotype_summary') as $mview) {
    $mview_id = tripal_get_mview_id($mview);

    if (isset($mview_id) && $mview_id > 0) {
      tripal_delete_mview($mview_id);
    }
  }
}
