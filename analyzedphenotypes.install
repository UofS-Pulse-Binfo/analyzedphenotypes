<?php
/**
 * Implements hook_install().
 */

// Make the API available during install.


// System variables.
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.systemvars.api');

// Default Ontology Terms API.
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.ontology.api');

// Materialized View API.
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.materializedview.api');

// Genus API.
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.genus.api');

// API.
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.api');


/**
 * Implements hook_enable().
 */
function analyzedphenotypes_enable() {
  // Check we have the phenotype tables we expect to have.
  if (!db_table_exists('chado.phenotype')) {
    tripal_report_error('analyzedpenotypes', TRIPAL_CRITICAL,
      'Analyzed Phenotypes requires the chado.phenotype table to exists. Make sure you have installed chado v1.2+');
    return FALSE;
  }
  if (!db_table_exists('chado.phenotypeprop')) {
    tripal_report_error('analyzedpenotypes', TRIPAL_CRITICAL,
      'Analyzed Phenotypes requires the chado.phenotypeprop table to exists. Make sure you have installed chado v1.2+');
    return FALSE;
  }

  // Add a materialized view to calculate the mean for quantitative data.
  $mviewquery = ap_construct_mview_phenotypesummary_query();
  $mviewschema = ap_construct_mview_phenotypesummary_schema();
  tripal_add_mview($mviewschema['table'], 'analyzedphenotypes', $mviewschema, $mviewquery, $mviewschema['description'], FALSE);

  // Add a summary materialized view.
  $query = "
    (SELECT organism_genus, 1 as num, 1 as count
       FROM chado.mview_phenotype
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 2 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, trait_id FROM chado.mview_phenotype) d2
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 3 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, experiment_id FROM chado.mview_phenotype) d3
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 4 as num, count(1)
       FROM (SELECT DISTINCT organism_genus, stock_id FROM chado.mview_phenotype) d4
       GROUP BY organism_genus)
    UNION
      (SELECT organism_genus, 5 as num, count(1)
       FROM chado.mview_phenotype
       GROUP BY organism_genus)
  ";

  $schema = array (
    'table' => 'mview_phenotype_summary',
    'description' => 'A summary of phenotypes.',
    'fields' => array (
      'organism_genus' => array (
        'type' => 'text',
        'not null' => true,
      ),
      'column_num' => array (
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'count' => array (
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
    ),
  );

  tripal_add_mview($schema['table'], 'analyzedphenotypes', $schema, $query, $schema['description'], FALSE);

  // Extend chado phenotype/phenotypeprop.
  $arr_fields = array(
    'project_id' => array('table' => 'phenotype',     'ref' => 'project', 'ref_id' => 'project_id'),
    'stock_id' =>   array('table' => 'phenotype',     'ref' => 'stock',   'ref_id' => 'stock_id'),
    'cvalue_id' =>  array('table' => 'phenotypeprop', 'ref' => 'cvterm',  'ref_id' => 'cvterm_id'),
    'unit_id' =>  array('table' => 'phenotype', 'ref' => 'cvterm',  'ref_id' => 'cvterm_id'),
  );
  foreach($arr_fields as $field => $items) {
    $exists = db_field_exists('chado.' . $items['table'], $field);

    if (!$exists) {
      $sql = sprintf('ALTER TABLE {%s} ADD COLUMN %s integer REFERENCES {%s} (%s)',
      $items['table'], $field, $items['ref'], $items['ref_id']);

      chado_query($sql);
    }
  }

  // Helpfull guide the admin.
  drupal_set_message(t(
    'Analyzed Phenotypes needs to be configured <a href="@url">here</a> in order to be specific to your system.',
    array('@url' => url('admin/tripal/extension/analyzedphenotypes/settings'))),
    'warning');


  // Initialize Variables:
  // Load default ontology terms for method, location, replicate, collector, genus, related and year
  // in AP configuration page.
  $default_ontology = ap_load_defaultontology();

  // All system variables, groupped by options, cvdbon and terms.
  $sysvars = ap_construct_variablenames();

  // Set default.
  // Terms.
  foreach($sysvars['terms'] as $v => $var) {
    // Set the variable to default ontology term.
    // base terms: location, replicate, year ...
    $v = trim(str_replace('ap_', '', $v));

    variable_set($var, $default_ontology[$v]);
  }

  $has_organism = ap_get_genus();
  if ($has_organism) {
    // Other system variables.
    // Genus - cv, db and ontology.
    foreach($sysvars['cvdbon'] as $v => $var) {
      foreach($var as $h) {
        variable_set($h, 'not set');
      }
    }
  }

  // Allow new traits.
  // Default to allow new traits to be added.
  foreach($sysvars['options'] as $v => $var) {
    variable_set($var, 1);
  }

  $directories = ap_construct_datafile_destinationpath();
  foreach($directories as $dir) {
    file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  }
}


/**
 * Implements hook_uninstall().
 */
function analyzedphenotypes_uninstall() {
  $sysvars = ap_construct_variablenames();

  foreach($sysvars as $i => $vars) {
    foreach($vars as $var_name) {
      if ($i == 'cvdbon') {
        foreach($var_name as $cvdbon => $var_name2) {
          variable_del($var_name2);
        }
      }
      else {
        variable_del($var_name);
      }
    }
  }

  $mviews = array('mview_phenotype', 'mview_phenotype_summary');
  foreach($mviews as $mview) {
    $mview_id = tripal_get_mview_id($mview);

    if (isset($mview_id) && $mview_id > 0) {
      tripal_delete_mview($mview_id);
    }
  }
}


/**
 * Implements hook_requirements().
 */
function analyzedphenotypes_requirements($phase) {
  $requirements = array();

  if ($phase == 'install') {
    // Check D3 and Excel file writer.
    $arr_libraries = array(
      'D3' => array(
        'is_in' => libraries_get_path('d3'),
        'source' => 'https://github.com/tripal/tripald3',
        'path' => 'i.e., sites/all/libraries/d3',
      ),
      'Excel Writer' => array(
        'is_in' => libraries_get_path('PHP_XLSXWriter_plus'),
        'source' => 'https://github.com/SystemDevil/PHP_XLSXWriter_plus',
        'path' => 'i.e., sites/all/libraries/PHP_XLSXWriter_plus',
      )
    );

    foreach($arr_libraries as $i => $info) {
      if (!$info['is_in']) {
        $requirements[$i] = array(
          'severity' => REQUIREMENT_ERROR,
          'description' =>
            t('This module uses !library, which is missing in your Drupal site. Please download and extract the entire contents of the archive into Libraries Directory %path directory on your server.',
              array('!library' => l(strtoupper(str_replace('_',' ',$i)), $info['source'], array('attributes' => array('target' => '_blank'))), '%path' => $info['path'])),
        );
      }
    }

    $directories = ap_construct_datafile_destinationpath();

    foreach($directories as $dir) {
      $dir_exists = file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

      if (!$dir_exists) {
        $requirements['file_directory' . $dir] = array(
          'severity' => REQUIREMENT_ERROR,
          'description' => t('File directory !dir is not writable. Please update directory permission and try again.',
            array('!dir' => $dir)
          )
        );
      }
    }
  }


  return $requirements;
}

/**
 * Implements hook_schema().
 */
function analyzedphenotypes_schema() {
  $tables = [];

  $tables['analyzedphenotypes_collections'] = [
    'description' => 'Keeps track of phenotypic data collections; specifically, options for display.',
    'fields' => [
      'collection_id' => [
        'description' => 'The primary identifier for a phenotypic data collection.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ],
      'genus' => [
        'description' => 'The genus of the germplasm this data was taken on.',
        'type' => 'varchar',
        'not null' => TRUE,
      ],
      'trait_id' => [
        'description' => 'The Trait (e.g. plant height).',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'method_id' => [
        'description' => 'The Method (e.g. stretched primary stem).',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'unit_id' => [
        'description' => 'The Unit (e.g. centimeters).',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'project_id' => [
        'description' => 'The Experiment',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'chart_type' => [
        'description' => 'The type of chart which should be used for display (e.g. "multibar", "violin").',
        'type' => 'varchar',
        'not null' => TRUE,
      ],
    ],
    'unique keys' => [
      'composite_key' => ['trait_id', 'method_id', 'unit_id', 'project_id'],
    ],
    'indexes' => [],
    'primary key' => ['collection_id'],
  ];

  return $tables;
}

/**
 * Create analyzedpenotypes_collections table and populate defaults.
 */
function analyzedphenotypes_update_7100() {

  // Load the schema from mymodule_schema() so you don't have to duplicate code.
  $schema = analyzedphenotypes_schema();

  // Pass the table name and schema for that table to db_create_table()
  db_create_table(
    'analyzedphenotypes_collections',
    $schema['analyzedphenotypes_collections']
  );

  // Populate the table for pre-existing collections.
  $sql = "SELECT
      pp.value as genus,
      p.attr_id as trait_id,
      p.assay_id as method_id,
      p.unit_id,
      p.project_id,
      CASE
        WHEN (up.value = 'quantitative') THEN 'violin'
        ELSE 'multibar' END
        as chart_type
    FROM chado.phenotype p
    LEFT JOIN chado.projectprop pp ON pp.project_id=p.project_id
      AND pp.type_id IN (SELECT cvterm_id FROM chado.cvterm WHERE name='genus')
    LEFT JOIN chado.cvtermprop up ON up.cvterm_id=p.unit_id
      AND up.type_id IN (SELECT cvterm_id FROM chado.cvterm WHERE name='additionalType')
    GROUP BY p.attr_id, p.assay_id, p.unit_id, p.project_id, pp.value, up.value";
  db_query('INSERT INTO {analyzedphenotypes_collections}
    (genus, trait_id, method_id, unit_id, project_id, chart_type)' . $sql);
}
