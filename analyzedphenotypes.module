<?php

/**
 * @file
 * The main functionality of this module.
 */


module_load_include('inc', 'analyzedphenotypes', 'include/analyzedphenotypes.functions');
module_load_include('inc', 'analyzedphenotypes', 'include/analyzedphenotypes.validators');


/**
 * Implements hook_menu().
 */
function analyzedphenotypes_menu() {
  $items = array();

  // Main menu items for phenotypes: shows a beanplot -select trait and project.
  $items['phenotypes'] = array(
    'title' => 'Phenotypes',
    'description' => 'Summarizes phenotypic data available.',
    'page callback' => 'analyzed_phenotypes_all_data_summary_page',
    'access arguments' => array(TRUE),
    'file' => 'include/analyzedphenotypes.summary.page.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Main menu items for phenotypes: shows a beanplot -select trait and project.
  $items['phenotypes/trait-distribution'] = array(
    'title' => 'Trait Distribution Chart',
    'description' => 'Summarizes phenotypic data for a given trait and project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_beanplot_form'),
    'access arguments' => array(TRUE),
    'file' => 'include/analyzedphenotypes.beanplot.page.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // JSON for beanplot.
  $items['json/phenotypes/beanplot/%/%'] = array(
    'page callback' => 'analyzedphenotypes_beanplot_json',
    'page arguments' => array(3, 4),
    'access arguments' => array(TRUE),
    'file' => 'include/analyzedphenotypes.beanplot.page.inc',
    'type' => MENU_CALLBACK,
  );

  // ADMINISTRATIVE PAGES.
  $all_path = analyzedphenotypes_moduleprop();
  $tripal_extension_ap = $all_path['ap'];

  // Main administrative pages for analyzed phenotypes.
  $items[$tripal_extension_ap] = array(
    'title' => 'Analyzed Phenotypes',
    'description' => 'Lorem ipsum dolor sit amet (Hello Analyzedphenotypes).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_page_directory'),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

 // Settings.
  $items[$tripal_extension_ap . '/settings'] = array(
    'title' => 'Analyzed Phenotypes Settings',
    'description' => 'Lorem Ipsum dolor sit amet.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_settings'),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Data Loader.
  $items[$tripal_extension_ap . '/upload'] = array(
    'title' => 'Analyzed Phenotypes Data Loader',
    'description' => 'Lorem Ipsum dolor sit amet.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_data_loader'),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  // Generate data in JSON object.
  $items[$tripal_extension_ap . '/json/%/%'] = array(
    'page callback' => 'analyzedphenotypes_data_json',
    'page arguments' => array(5, 6),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  // Generate validation result.
  $items[$tripal_extension_ap . '/validation_result/%/%'] = array(
    'page callback' => 'analyzedphenotypes_validation_result',
    'page arguments' => array(5, 6),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function analyzedphenotypes_theme($existing, $type, $theme, $path) {
  $items = array();

  // Administrative page directory
  $items['analyzedphenotypes_admin_page_directory'] = array(
    'template' => 'analyzedphenotypes_pages',
    'render element' => 'form',
    'path' => $path . '/theme',
  );

  // Data loader.
  $items['analyzedphenotypes_admin_data_loader'] = array(
    'render element' => 'form',
    'template' => 'analyzedphenotypes_pages',
    'path' => $path . '/theme',
  );

  // Report errors generated by validators.
  $items['analyzedphenotypes_validator_report'] = array(
    'template' => 'analyzedphenotypes_validators',
    'path' => $path . '/theme',
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function analyzedphenotypes_preprocess_analyzedphenotypes_admin_page_directory(&$variables, $hook) {
  $all_path = analyzedphenotypes_moduleprop();
  $variables['path_extension'] = $all_path['ap'];
  $variables['directory'] = $variables['form']['#ap_admin_directory'];

  return $variables;
}

/**
 * Implements hook_theme().
 */
function analyzedphenotypes_preprocess_analyzedphenotypes_admin_data_loader(&$variables, $hook) {
  $variables['stage_title'] = $variables['form']['#ap_stage_title'];
  $variables['stages'] = $variables['form']['#ap_stage_indicators'];
  $variables['current_stage'] = $variables['form']['#ap_current_stage'];


  return $variables;
}



/**
 * Implements hook_libraries_info().
 */
function analyzedphenotypes_libraries_info() {


}


/**
 * Function callback: Fetch records and populate to autocomplete search fields.
 *
 * @param $data_type
 *   A string indicating the source of call and what type of data is requested.
 *   eg. Projects, ontology etc.
 *
 * @return
 *   A JSON object.
 */
function analyzedphenotypes_data_json($datatype, $data, $key = '') {
  $data_JSON = array();

  switch($datatype) {
    //
    case 'projects':
      $data_JSON = analyzedphenotypes_projectprop('pattern_match_name', $key);

      break;

    //
    case 'validate_jobstatus':
      $job_id = $data;
      $job = tripal_get_job($job_id);

      if ($job) {
        $job_status = strtolower(trim($job->status));

        if ($job_status == 'completed') {
          $progress = 100;
          $message  = 'Completed';

          if ($job->progress != $progress) {
            dp_update('tripal_jobs')
              ->fields(array('progress' => $progress))
              ->condition('job_id', $job_id, '=')
              ->execution();
          }
        }
        else {
          $all_path = analyzedphenotypes_moduleprop();
          $all_filename =  analyzedphenotypes_fileprop('filename');

          $file_result   = $all_path['temp'] . '/' . str_replace('@JOB_ID', $job_id, $all_filename['validate progress']);
          $file_content = file_get_contents($file_result);

          $progress = (empty($file_content)) ? '...' : trim($file_content);
          $message  = ($progress == '100' || $job_status == 'completed')
            ? 'Completed' : $job->status;
        }

        $data_JSON = array(
          'percentage' => $progress,
          'message'    => $message,
        );
      }

      break;

    //
    case 'describe':
      return 0;
      break;

    //
    case 'save_jobstatus':
      break;

    //
    case 'ontology':
      $o = analyzedphenotypes_ontologyprop('suggest', $data);
      $ontology_suggestions = array_keys($o);

      foreach($ontology_suggestions as $i) {
        $data_JSON[$i] = $i;
      }

      break;

  }


  print drupal_json_output($data_JSON);

  // Do not show the Drupal headers and formatting.
  // This is critical as if anything else is printed to the screen you will see
  // an AJAX error instead of your progress bar ;-).
  exit();
}
