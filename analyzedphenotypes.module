<?php

/**
 * @file
 * The main functionality of this module.
 */


// AP API.
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.api');
// Default Ontology Terms API.
module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.defaultontology.api.inc');
// Validators.
module_load_include('inc', 'analyzedphenotypes', 'include/analyzedphenotypes.validators');


/**
 * Implements hook_menu().
 */
function analyzedphenotypes_menu() {
  $items = array();

  // Main menu items for phenotypes: shows a beanplot -select trait and project.
  $items['phenotypes'] = array(
    'title' => 'Phenotypes',
    'description' => 'Summarizes phenotypic data available.',
    'page callback' => 'analyzed_phenotypes_all_data_summary_page',
    'access arguments' => array('access analyzed phenotypes'),
    'file' => 'include/analyzedphenotypes.summary.page.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Main menu items for phenotypes: shows a beanplot -select trait and project.
  $items['phenotypes/trait-distribution'] = array(
    'title' => 'Trait Distribution Chart',
    'description' => 'Summarizes phenotypic data for a given trait and project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_beanplot_form'),
    'access arguments' => array('access analyzed phenotypes'),
    'file' => 'include/analyzedphenotypes.beanplot.page.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // JSON for beanplot.
  $items['json/phenotypes/beanplot/%/%'] = array(
    'page callback' => 'analyzedphenotypes_beanplot_json',
    'page arguments' => array(3, 4),
    'access arguments' => array('access analyzed phenotypes'),
    'file' => 'include/analyzedphenotypes.beanplot.page.inc',
    'type' => MENU_CALLBACK,
  );

  // ADMINISTRATIVE PAGES.
  $tripal_extension_ap = 'admin/tripal/extension/analyzedphenotypes';

  // Main administrative pages for analyzed phenotypes.
  $items[$tripal_extension_ap] = array(
    'title' => 'Analyzed Phenotypes',
    'description' => 'Provides phenotypic trait pages, charts, upload and download for partially filtered (not raw) phenotypic data.',
    'access arguments' => array('administer tripal'),
  );

  // Data Loader.
  // @todo should this be at admin/tripal/loaders?
  $items[$tripal_extension_ap . '/upload'] = array(
    'title' => 'Upload Phenotypic Data',
    'description' => 'Import a partially filtered (not raw) phenotypic datasets into Chado for display on Trait and Germplasm pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_data_loader'),
    'access arguments' => array('upload analyzed phenotypes'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
  );

  // Settings.
  $items[$tripal_extension_ap . '/settings'] = array(
    'title' => 'Configuration',
    'description' => 'Set the controlled vocabularies to be used by this module, as well, as other options to customize it to your data/organism.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_settings'),
    'access arguments' => array('administer tripal'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

  // Generate data in JSON object.
  $items[$tripal_extension_ap . '/json/%/%'] = array(
    'page callback' => 'analyzedphenotypes_data_json',
    'page arguments' => array(5, 6),
    'access arguments' => array('upload analyzed phenotypes'),
    'type' => MENU_CALLBACK,
  );

  // Generate validation result.
  $items[$tripal_extension_ap . '/validation_result/%/%'] = array(
    'page callback' => 'analyzedphenotypes_validationresult',
    'page arguments' => array(5, 6),
    'access arguments' => array('upload analyzed phenotypes'),
    'type' => MENU_CALLBACK,
  );

  // Data Downloader.
  $items['download'] = array(
    'title' => 'Download Analyzed Phenotypic Data',
    'description' => 'Download Analyzed Phenotypic Data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_data_download'),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

    $items['download/autofield/%/%/%'] = array(
      'title' => 'link',
      'page callback' => 'analyzedphenotypes_autofield_callback',
      'page arguments' => array(2, 3, 4),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'delivery callback' => 'ajax_deliver',
    );

  // Tripal Download Implementation.
  $items['download/analyzed_phenotypic_data'] = array(
    'title' => 'Analyzed Phenotypic Data Download',
    'page callback' => 'trpdownload_download_page',
    'page arguments' => array('analyzedphenotypes_download'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function analyzedphenotypes_permission() {
  return array(
    // Administer Tripal.
    'administer tripal' => array(
      'title' => t('Administer Tripal'),
    ),
    // Upload Analyzed Phenotypes.
    'upload analyzed phenotypes' => array(
      'title' => t('Upload Analyzed Phenotypic Data'),
    ),
    // Download Analyzed Phenotypes.
    'download analyzed phenotypes' => array(
      'title' => t('Download Analyzed Phenotypic Data'),
    ),
    // Access Analyzed Phenotypes.
    'access analyzed phenotypes' => array(
      'title' => t('Access Analyzed Phenotypic Data'),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function analyzedphenotypes_theme($existing, $type, $theme, $path) {
  $items = array();

  // Administrative settings
  $items['analyzedphenotypes_admin_settings'] = array(
    'template' => 'analyzedphenotypes_pages',
    'render element' => 'form',
    'path' => $path . '/theme',
  );

  // Administrative page directory
  $items['analyzedphenotypes_admin_page_directory'] = array(
    'template' => 'analyzedphenotypes_pages',
    'render element' => 'form',
    'path' => $path . '/theme',
  );

  // Data loader.
  $items['analyzedphenotypes_admin_data_loader'] = array(
    'template' => 'analyzedphenotypes_pages',
    'render element' => 'form',
    'path' => $path . '/theme',
  );

  // Report errors generated by validators.
  $items['analyzedphenotypes_validator_report'] = array(
    'template' => 'analyzedphenotypes_validators',
    'path' => $path . '/theme',
  );

  // Data downloader.
  $items['analyzedphenotypes_data_download'] = array(
    'template' => 'analyzedphenotypes_pages',
    'render element' => 'form',
    'path' => $path . '/theme',
  );

  // Form table.
  $items['analyzedphenotypes_form_table'] = array(
    'render element' => 'form',
  );


  return $items;
}


/**
 * Theme callback to render analyzedphenotypes_form_table field type.
 *
 * Credits to : Electronic Press
 * @link http://e9p.net/theming-drupal-7-form-elements-table. @endlink
 */
function theme_analyzedphenotypes_form_table(&$variables) {
  $form = $variables['form'];
  $rows = $form['rows'];
  $header = $form['#header'];

  // Setup the structure to be rendered and returned.
  $content = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
  );

  foreach (element_children($rows) as $row_index) {
    $row = array();

    foreach (element_children($rows[$row_index]) as $col_index) {
      $row[] = drupal_render($rows[$row_index][$col_index]);
    }

    // A row in the table.
    $content['#rows'][] = $row;
  }


  // Render the table and return.
  return drupal_render($content);
}


/**
 * Implements hook_preprocess().
 */
function analyzedphenotypes_preprocess_analyzedphenotypes_admin_page_directory(&$variables, $hook) {
  $variables['path_extension'] = 'admin/tripal/extension/analyzedphenotypes';
  $variables['directory'] = $variables['form']['#ap_admin_directory'];


  return $variables;
}


/**
 * Implements hook_preprocess().
 */
function analyzedphenotypes_preprocess_analyzedphenotypes_admin_data_loader(&$variables, $hook) {
  // Default system to not properly set, then prove otherwise.
  $notset = 'not set';
  $allow_new = 0;

  // All genus.
  $genus = analyzedphenotypes_genusprop();

  $sysvar_genus_set = 0;

  // Test genus cv and db. System only requires a genus to have a cv and db set.
  foreach($genus as $g) {
    $sysvar_genus = analyzedphenotypes_systemvariables('genus_vars', array(
      'genus' => $g,
    ));

    $sysvar_genus_cv = variable_get($sysvar_genus['cv']);
    $sysvar_genus_db = variable_get($sysvar_genus['db']);

    if ($sysvar_genus_cv > 0 && $sysvar_genus_db > 0) {
      // Found at least 1 genus with cv and db set.
      $sysvar_genus_set = 1;

      break;
    }
  }

  if ($sysvar_genus_set > 0) {
    // Did no find a genus with cv and db set.
    $notset = 'set';
  }

  // Test if terms (location, replicate etc.) were set.
  $sysvars = analyzedphenotypes_systemvariables('terms');

  foreach($sysvars as $var) {
    $sysvar_term = variable_get($var);

    if ($sysvar_term <= 0) {
      // If any one failed, then module is not ready.
      $notset = 'not set';

      break;
    }
  }

  unset($sysvars);

  // Allow new terms to be upload. Warn admin that the module is set to not allow
  // new trait be uploaded.
  $sysvars = analyzedphenotypes_systemvariables('options');

  foreach($sysvars as $i => $var) {
    $sysvar_options = variable_get($var);

    if ($i == 'ap_allownew' && $sysvar_options == 1) {
      $allow_new = 1;
    }

    // Other optional settings.
  }

  unset($sysvars);

  // Make configuration value available to theme.
  $variables['system_set'] = $notset;
  $variables['allow_new']  = $allow_new;

  $variables['stages'] = $variables['form']['#ap_stage_indicators'];
  $variables['stage_title'] = $variables['form']['#ap_stage_title'];
  $variables['current_stage'] = $variables['form']['#ap_current_stage'];


  return $variables;
}



/**
 * Implements hook_libraries_info().
 *
 * Define external libraries: Spreadsheet Writer.
 */
function analyzedphenotypes_libraries_info() {
  // Spreadsheet writer.
  // Let Drupal decide where library is.
  $lib_writer = libraries_get_path('PHP_XLSXWriter_plus');

  $libraries['spreadsheet_writer'] = array(
    'name' => 'PHP_XLSXWriter_plus Spreadsheet Writer',
    'vendor url' => 'https://github.com/SystemDevil/PHP_XLSXWriter_plus',
    'version' => 1,
    'download url' => 'https://github.com/SystemDevil/PHP_XLSXWriter_plus/archive/master.zip',
    'library path' => $lib_writer,
    'files' => array('xlsxwriter.class.php'),
  );

  return $libraries;
}


/**
 * Function callback: Convert query results or parameters suplied to an array of JSON object
 * and supply the result to field or form elements (ie. autocomplete form field, validation
 * progress etc.) that requires data in this notation.
 *
 * @param $page_argument_5
 *   A string indicating the source of call and what type of data is requested.
 *   #5 of the menu's page aruguments.
 *   eg. Projects, ontology etc.
 * @param $page_argument_6
 *   Additional parameter required.
 *   #6 of the menu's page aruguments.
 *   eg. Job Id when generating progress report for Job Status source type.
 * @param $key
 *   Default to null, value entered in a field (eg. autocomplete field).
 *
 * @return
 *   A JSON object.
 *
 * @see hook_menu() implementation - Generate data in JSON object, above that handles all page elements in this
 *   module that requires JSON.
 */
function analyzedphenotypes_data_json($page_argument_5, $page_argument_6, $key = null) {
  $data_JSON = array();

  $property = $page_argument_5;
  $parameter = $page_argument_6;

  switch($property) {
    //
    case 'projects':
      // Fetch project/experiment that matches a keyword in AP data loader
      // Select experiment autocomplete form field in:
      //   admin.form.inc - analyzedphenotypes_loader_form_upload() : Stage #1 - Select experiment, genus and upload file.
      // Parameters:
      //   $page_argument_5 : projects.
      //   $page_argument_6 : experiment.
      //   $key : Keyword enterd in the field.
      $data_JSON = array();

      $projectprop = analyzedphenotypes_projectprop('match_key', array(
        'project_keyword' => $key,
      ));

      if ($projectprop) {
        foreach($projectprop as $id => $name) {
          $data_JSON[$name] = $name;
        }
      }

      break;

    //
    case 'jobstatus':
      // Update job status of a Tripal Job request in AP data loader page in:
      //   admin.form.inc - analyzedphenotypes_loader_form_validates() : Stage #2 - Validate data.
      //   admin.form.inc - analyzedphenotypes_loader_form_save() : Stage #4 - Save Data.
      // Parameters:
      //   $page_argument_5 : jobstatus.
      //   $page_argument_6 : Tripal Job job id number.
      //   $key : null.
      $data_JSON = array();

      $job = analyzedphenotypes_tripaljobprop('get_job', array(
        'job_id' => $parameter,
      ));

      if ($job) {
        $job_status = strtolower(trim($job['status']));

        if ($job_status == 'completed') {
          // Job completed, return completed!
          // Set job to completed - 100%.
          $progress = 100;
          $message  = 'Completed';

          if ($job['progress'] != $progress) {
            analyzedphenotypes_tripaljobprop('update_progress', array(
              'job_id' => $parameter,
              'progress' => $progress,
            ));
          }
        }
        else {
          // Job not complete. Read progress written by tripaljobprop write_progress function
          // and convert progress value to JSON for progress bar in
          // analyzedphenotypes_save_tsv_data() in validators.inc.
          $tripaljobprop = analyzedphenotypes_tripaljobprop('read_progress', array(
            'job_id' => $parameter,
            'source' => 'jobprogress',
          ));

          $progress = (empty($tripaljobprop)) ? '...' : trim($tripaljobprop);
          $message = ($progress == '100' || $job['status'] == $job_status)
            ? 'Completed' : $job['status'];
        }

        $data_JSON = array(
          'percentage' => $progress,
          'message' => $message,
        );
      }

      break;

    //
    case 'ontology':
      // Fetch otology terms that matches a keyword in AP data loader
      // Enter ontology term autocomplete form feild in:
      //   admin.form.inc - analyzedphenotypes_loader_form_describe() : Stage #3 - Describe Traits.
      // Parameters:
      //   $page_argument_5 : ontology.
      //   $page_argument_6 : genus ontology (on) configuration settings.
      //   $key : null.
      $data_JSON = array();

      $ontology_suggestions = analyzedphenotypes_cvprop('terms_in_cv', array(
        'cv_id' => $parameter,
      ));

      foreach($ontology_suggestions as $i => $term) {
        $data_JSON[ $term['name'] ] = $term['name'];
      }

      break;

    //
    case 'cvterms':
      // Fetch controlled vocabulary terms that matches a keyword in AP data loader
      // configuration page term autocomplete form field in:
      //   admin.form.inc - analyzedphenotypes_admin_settings().
      // Parameters:
      //   $page_argument_5 : cvterms.
      //   $page_argument_6 : cv.
      //   $key : Keyword entered in the field.
      $data_JSON = array();

      $cvterms = analyzedphenotypes_cvprop('suggest_term', array(
        'keyword' => $key,
      ));

      foreach($cvterms as $term => $cv) {
        $t = $term . ' (' . $cv . ')';

        $data_JSON[$t] = $t;
      }

      break;

    //
    case 'germplasm':
      $field_values = unserialize($parameter);

      foreach($field_values as $i => $g) {
        $data_JSON[$g] = $g;
      }

      break;

    //
    // Define additional case here.

    // default:
  }


  print drupal_json_output($data_JSON);

  // Do not show the Drupal headers and formatting.
  // This is critical as if anything else is printed to the screen you will see
  // an AJAX error instead of your progress bar ;-).
  exit();
}


// TRIPAL DOWNLOAD API IMPLEMENTATION

/**
 * Implements hook_register_tripaldownload_type().
 */
function analyzedphenotypes_register_trpdownload_type() {
  $types = array();

  // The key is the machine name of my download type.
  $types['analyzedphenotypes_download'] = array(
    // A human readable name to show in an administrative interface one day.
    'type_name' => 'Analyzed Phenotypic Data Download',
    // A human readable description of the format.
    'format' => '',
    // An array of functions that the API will use to customize your experience.
    'functions' => array(
      // The function that tripal jobs will call to generate the file.
      'generate_file' => 'analyzedphenotypes_trpdownload_generate_file',
      // OPTIONAL: provide a summary to the user on the download page.
      'summarize' => 'analyzedphenotypes_trpdownload_summarize_download',
      // OPTIONAL: determine your own filename.
      'get_filename' => 'analyzedphenotypes_trpdownload_get_filename',
      // OPTIONAL: Change the file suffix (defaults to .txt)
      'get_file_suffix' => 'analyzedphenotypes_trpdownload_get_suffix',
      // OPTIONAL: determine the human-readable format based on a function.
      'get_format' => 'analyzedphenotypes_trpdownload_get_readable_format',
    ),
  );

  return $types;
}


/**
 * Generate a readable and unique filename for the file to be generated.
 */
function analyzedphenotypes_trpdownload_get_filename($vars) {
  // Filename.
  $filename = 'analyzed_phenotypic_data_download' . date('YMd') .'_'. time();

  return $filename;
}

/**
 * determine the human-readable format based on a function.
 */
function analyzedphenotypes_trpdownload_get_readable_format($vars) {
   // File Extension from file type field options.
  foreach($vars as $l => $v) {
    if(is_array($v)) {
      foreach($v as $j => $m) {
        if ($j == 'code') {
          $code = $m;
        }
      }
    }
  }

  $v = base64_decode($code);

  if (!empty($v)) {
    // Field names.
    $fldname = analyzedphenotypes_fieldnames();
    $filters = explode('&', $v);

    foreach($filters as $i) {
      list($filter, $value) = explode('=', $i);

      if ($filter == $fldname['filetype']['base']) {
        $file_type = trim($value);
        break;
      }
    }

    switch($file_type) {
      case 'tsv':
        $format = 'Tab Separated Values (.tsv)';
        break;

      case 'csv':
        $format = 'Comma Separated Values (.csv)';
        break;

      case 'xlsx':
        $format = 'Microsoft Excel Spreadsheet (.xlsx)';
        break;
    }

    return $format;
  }
}

/**
 * Determine the file suffix for the file to be generated.
 */
function analyzedphenotypes_trpdownload_get_suffix($vars) {
  // File Extension from file type field options.
  foreach($vars as $l => $v) {
    if(is_array($v)) {
      foreach($v as $j => $m) {
        if ($j == 'code') {
          $code = $m;
        }
      }
    }
  }

  $v = base64_decode($code);

  if (!empty($v)) {
    // Field names.
    $fldname = analyzedphenotypes_fieldnames();
    $filters = explode('&', $v);

    foreach($filters as $i) {
      list($filter, $value) = explode('=', $i);

      if ($filter == $fldname['filetype']['base']) {
        $file_type = trim($value);
        break;
      }
    }

    return $file_type;
  }
}


/**
 * Function callback: generate csv file.
 */
function analyzedphenotypes_trpdownload_generate_file($vars, $job_id = NULL) {
  // Use this character to separate entries in a string.
  $delimiter = '~';

  $code = '';
  foreach($vars as $l => $v) {
    if(is_array($v)) {
      foreach($v as $j => $m) {
        if ($j == 'code') {
          $code = $m;
          break;
        }
      }
    }

    if ($l == 'filename') {
      $filename = $v;
    }
  }

  // Start extracting filters.
  if (empty($code) && empty($filename)) {
    die('Could not generate file. No filters selected.');
  }
  else {
    // Filters selected.
    $v = base64_decode($code);

    if (empty($v)) {
      die('Could not generate file. No filters selected.');
    }
    else {
      // Convert the query string to key and value pair.
      // Key should still match field name returned by _fieldnames().
      // FILTER or FORM FIELD VALUE.
      $filters = explode('&', $v);
      $filter_value = array();

      foreach($filters as $i) {
        @list($filter, $value) = explode('=', $i);

        // Field name = Value selected.
        $filter_value[$filter] = $value;
      }

      // Global/standard field names used in form, submit etc.
      // experiment, genus, species, traits, year, location, germplasmtype,
      // missingdata, filetype, averagerep, rfriendly, columnheaders
      $fldname = analyzedphenotypes_fieldnames();
      // File type field name value.
      $file_type = $filter_value[ $fldname['filetype']['base'] ];

      // Fetch all valid file types for download.
      // Use the result to ensure that only these registered types are allowed.
      $d = analyzedphenotypes_datafileprop('download_type');
      $download_type = array_keys($d);

      if (in_array($file_type, $download_type)) {
        // TSV, CSV or XLSX.

        // This array will hold datapoints for write-to-file.
        $to_write = array();

        // Start by reading the column headers field. This contains the headers
        // programmatically picked and/or selected by user. In addition, this
        // contains the set of columns required as well as the order it appears in file.

        // FILTER/FIELD NAME: columnheaders.
        $h = $filter_value[ $fldname['columnheaders']['base'] ];
        // Entries are delimited by $delimeter value, break it to individual unit.
        $g = explode($delimiter, $h);
        $column_headers_picked = array_map('trim', $g);

        // Make a clone copy of this array.
        $tmp_column_headers_picked = $column_headers_picked;

        // Does user want it RFriendly-ied.

        // FILTER/FIELD NAME: rfriendly.
        if ($filter_value[ $fldname['rfriendly']['base'] ]) {
          $column_headers_picked_rfriendly = array();

          foreach($column_headers_picked as $col) {
            $col = trim($col);

            if (!empty($col)) {
              $column_headers_picked_rfriendly[] = analyzedphenotypes_columnsprop('rfriendly', array(
                'column_header' => $col,
              ));
            }
          }

          // Reset the original column headers and use this rfriendly version.
          unset($column_headers_picked);
          $column_headers_picked = $column_headers_picked_rfriendly;
        }

        // The first item to write are the column headers.
        $to_write['header'] = $column_headers_picked;

        // Next... the Rows and rows and more rows.
        // Fetch dataset for a given filters.
        $dataset = analyzedphenotypes_populatefield('file', array(
          'filters' => $filter_value,
        ));

        if ($dataset) {
          // Have something to write to file.

          // SQL query uses alias to reference field. Use alias to access piece of data.
          $field_alias = analyzedphenotypes_columnsprop('column_to_field');

          // Compose a key to group data points. This grouping can then be used for
          // average replicate option.
          $field_keys = array($fldname['experiment']['base'], );

          // Begin.
          $column_headers_data = array();

          foreach($dataset as $data) {
            $data = (array)$data;

            unset($data['project_id'], $data['phenotype_id']);

            // Group dataset by this key. Later, whey user checked off average rep option
            // values can be averaged easily.
            $key = $data[ $field_alias['Experiment'] ]     .
                   $data[ $field_alias['Germplasm Name'] ] .
                   $data[ $field_alias['Location'] ]       .
                   $data[ $field_alias['Year'] ]           .
                   $data[ $fldname['traits']['base'] ];

            $to_write['data'][$key][] = $data;
          }

          // Need to average?
          if ($filter_value[ $fldname['averagerep']['base'] ]) {
            // All keys.
            $k = array_keys($to_write['data']);
            $unique_keys = array_unique($k);

            foreach($unique_keys as $u_k) {
              $all_values = array_column($to_write['data'][$u_k], $fldname['value']['base']);
              $v_count = count($all_values);
              $v_sum   = array_sum($all_values);
              $v_avg   = round($v_sum / $v_count, 2);

              // Collate all data collector into a comma separated value to
              // account all entries after doing the average.
              // Only when data collector column was reqested.

              // Summarize all datapoints into one by using the first item and add the
              // average value and data collectors.
              $first_item = $to_write['data'][$u_k][0];
              $first_item[ $fldname['value']['base'] ] = $v_avg;

              // No need to do this to replicate - since rep is omitted when averaged.
              if (array_search('Data Collector', $tmp_column_headers_picked)) {
                $all_collector = array_column($to_write['data'][$u_k], $fldname['collector']['base']);
                $unique_collector = array_unique($all_collector);
                $csv_collector = implode(',', $unique_collector);

                $first_item[ $fldname['collector']['base'] ] = $csv_collector;
              }

              // Add this line with key avg.
              $to_write['data'][$u_k]['avg'] = $first_item;
            }
          }

          // Write to file.

          // Start off with the header.
          $to_file[] = $to_write['header'];

          // Rows.
          $all_keys = array_keys($to_write['data']);
          $unique_keys = array_unique($all_keys);

          foreach($unique_keys as $u_key) {
            $source = array();

            if ($filter_value[ $fldname['averagerep']['base'] ]) {
              $source['avg'] = $to_write['data'][$u_key]['avg'];
            }
            else {
              unset($to_write['data'][$u_key]['avg']);
              $source = $to_write['data'][$u_key];
            }

            // Each line in the dataset.
            foreach($source as $s_i => $s_data) {
              $data_row = array();

              // Sort data into the right column header.
              foreach($tmp_column_headers_picked as $col) {
                if (isset($field_alias[$col])) {
                  // Column header has a corresponding field alias.
                  $data_row[] = ($s_data[ $field_alias[$col] ]) ?
                    $s_data[ $field_alias[$col] ] : 'n/a';
                }
                else {
                  // Could be the trait measured.
                  $data_row[] = ($s_data[ $fldname['traits']['base'] ] == $col)
                    ? $source[$s_i]['value'] : 'n/a';
                }
              }

              $to_file[] = $data_row;
            }
          }

          // DEBUG:
          // dpm($to_file);

          // CREATE FILE.
          if ($to_file) {
            analyzedphenotypes_writefile($filename, $to_file, $file_type);
          }
        }
        else {
          // File type not supported.
          die('Could not generate file. Query returned 0 rows.');
        }
      }
      else {
        // File type not supported.
        die('Could not generate file. File type no supported.');
      }
    //
    }
  }
}
