<?php

/**
 * @file
 * The main functionality of this module.
 */


module_load_include('inc', 'analyzedphenotypes', 'api/analyzedphenotypes.api');
module_load_include('inc', 'analyzedphenotypes', 'include/analyzedphenotypes.validators');


/**
 * Implements hook_menu().
 */
function analyzedphenotypes_menu() {
  $items = array();

  // Main menu items for phenotypes: shows a beanplot -select trait and project.
  $items['phenotypes'] = array(
    'title' => 'Phenotypes',
    'description' => 'Summarizes phenotypic data available.',
    'page callback' => 'analyzed_phenotypes_all_data_summary_page',
    'access arguments' => array(TRUE),
    'file' => 'include/analyzedphenotypes.summary.page.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Main menu items for phenotypes: shows a beanplot -select trait and project.
  $items['phenotypes/trait-distribution'] = array(
    'title' => 'Trait Distribution Chart',
    'description' => 'Summarizes phenotypic data for a given trait and project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_beanplot_form'),
    'access arguments' => array(TRUE),
    'file' => 'include/analyzedphenotypes.beanplot.page.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // JSON for beanplot.
  $items['json/phenotypes/beanplot/%/%'] = array(
    'page callback' => 'analyzedphenotypes_beanplot_json',
    'page arguments' => array(3, 4),
    'access arguments' => array(TRUE),
    'file' => 'include/analyzedphenotypes.beanplot.page.inc',
    'type' => MENU_CALLBACK,
  );

  // ADMINISTRATIVE PAGES.
  $tripal_extension_ap = 'admin/tripal/extension/analyzedphenotypes';

  // Main administrative pages for analyzed phenotypes.
  $items[$tripal_extension_ap] = array(
    'title' => 'Analyzed Phenotypes',
    'description' => 'Analyzed Phenotypes Administrative Pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_page_directory'),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Data Loader.
  $items[$tripal_extension_ap . '/upload'] = array(
    'title' => 'Upload Analyzed Phenotypic Data',
    'description' => 'Upload Analyzed Phenotypic Data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_data_loader'),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
  );

  // Settings.
  $items[$tripal_extension_ap . '/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_settings'),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

  $items[$tripal_extension_ap . '/settings/database_cv'] = array(
    'title' => 'Database & CV Terms',
    'description' => 'Database and Controlled Vocabulary.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_settings', 5),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items[$tripal_extension_ap . '/settings/property_terms'] = array(
    'title' => 'Plant Property Traits',
    'description' => 'Plant Property Terms.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_settings', 5),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items[$tripal_extension_ap . '/settings/crop_ontology'] = array(
    'title' => 'Crop Ontology',
    'description' => 'Crop Ontology Terms.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzedphenotypes_admin_settings', 5),
    'access arguments' => array('access administration pages'),
    'file' => 'include/analyzedphenotypes.admin.form.inc',
    'type' => MENU_LOCAL_TASK,
  );



  // Generate data in JSON object.
  $items[$tripal_extension_ap . '/json/%/%'] = array(
    'page callback' => 'analyzedphenotypes_data_json',
    'page arguments' => array(5, 6),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  // Generate validation result.
  $items[$tripal_extension_ap . '/validation_result/%/%'] = array(
    'page callback' => 'analyzedphenotypes_validationresult',
    'page arguments' => array(5, 6),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function analyzedphenotypes_theme($existing, $type, $theme, $path) {
  $items = array();

  // Administrative settings
  $items['analyzedphenotypes_admin_settings'] = array(
    'template' => 'analyzedphenotypes_pages',
    'render element' => 'form',
    'path' => $path . '/theme',
  );

  // Administrative page directory
  $items['analyzedphenotypes_admin_page_directory'] = array(
    'template' => 'analyzedphenotypes_pages',
    'render element' => 'form',
    'path' => $path . '/theme',
  );

  // Data loader.
  $items['analyzedphenotypes_admin_data_loader'] = array(
    'template' => 'analyzedphenotypes_pages',
    'render element' => 'form',
    'path' => $path . '/theme',
  );

  // Report errors generated by validators.
  $items['analyzedphenotypes_validator_report'] = array(
    'template' => 'analyzedphenotypes_validators',
    'path' => $path . '/theme',
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function analyzedphenotypes_preprocess_analyzedphenotypes_admin_page_directory(&$variables, $hook) {
  $variables['path_extension'] = 'admin/tripal/extension/analyzedphenotypes';
  $variables['directory'] = $variables['form']['#ap_admin_directory'];


  return $variables;
}

/**
 * Implements hook_theme().
 */
function analyzedphenotypes_preprocess_analyzedphenotypes_admin_data_loader(&$variables, $hook) {
  $notset = '';
  $vars = analyzedphenotypes_systemvars('db_cv');
  $allow_new = '';

  foreach($vars as $i => $var) {
    $system_var = variable_get($var);

    if ($i == 'ap_allow_new') {
      $allow_new = $system_var;
      continue;
    }

    if ($system_var == 'not set') {
      $notset = 'not set';
      break;
    }
  }

  $variables['system_set'] = $notset;
  $variables['allow_new']  = $allow_new;

  $variables['stages'] = $variables['form']['#ap_stage_indicators'];
  $variables['stage_title'] = $variables['form']['#ap_stage_title'];
  $variables['current_stage'] = $variables['form']['#ap_current_stage'];


  return $variables;
}


/**
 * Function callback: Fetch records and populate to autocomplete search fields.
 *
 * @param $data_type
 *   A string indicating the source of call and what type of data is requested.
 *   eg. Projects, ontology etc.
 *
 * @return
 *   A JSON object.
 */
function analyzedphenotypes_data_json($page_argument_5, $page_argument_6, $key = null) {
  $data_JSON = array();

  $property = $page_argument_5;
  $parameter = $page_argument_6;

  switch($property) {
    //
    case 'projects':
      $projectprop = analyzedphenotypes_projectprop('match_key', array(
        'project_keyword' => $key,
      ));

      if ($projectprop) {
        foreach($projectprop as $id => $name) {
          $data_JSON[$name] = $name;
        }
      }

      break;

    //
    case 'jobstatus':
      $job = analyzedphenotypes_tripaljobprop('get_job', array(
        'job_id' => $parameter,
      ));

      if ($job) {
        $job_status = strtolower(trim($job['status']));

        if ($job_status == 'completed') {
          $progress = 100;
          $message  = 'Completed';

          if ($job['progress'] != $progress) {
            analyzedphenotypes_tripaljobprop('update_progress', array(
              'job_id' => $parameter,
              'progress' => $progress,
            ));
          }
        }
        else {
          $tripaljobprop = analyzedphenotypes_tripaljobprop('read_progress', array(
            'job_id' => $parameter,
            'source' => 'jobprogress',
          ));

          $progress = (empty($tripaljobprop)) ? '...' : trim($tripaljobprop);
          $message = ($progress == '100' || $job['status'] == $job_status)
            ? 'Completed' : $job['status'];
        }

        $data_JSON = array(
          'percentage' => $progress,
          'message' => $message,
        );
      }

      break;

    //
    case 'describe':
      return 0;
      break;

    //
    case 'save_jobstatus':
      break;

    //
    case 'ontology':
      list($project_genus, $trait_name) = explode(':', $parameter);

      $ontology_suggestions = analyzedphenotypes_ontologyprop('suggest', array(
        'project_genus' => $project_genus,
        'trait_name' => $trait_name,
      ));

      foreach($ontology_suggestions as $i => $term) {
        $name = $term['name'];
        $data_JSON[$name] = $name;
      }

      break;

    //
    // Define additional case here.

    // default:
  }


  print drupal_json_output($data_JSON);

  // Do not show the Drupal headers and formatting.
  // This is critical as if anything else is printed to the screen you will see
  // an AJAX error instead of your progress bar ;-).
  exit();
}